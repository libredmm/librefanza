require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/feeds", type: :request do
  let(:feed) { create(:feed) }
  let(:user) { create(:user) }
  let(:admin) { create(:admin) }
  
  describe "GET /feeds" do
    it "works for admin" do
      get feeds_path(as: admin)
      expect(response).to be_successful
    end

    it "rejects other users" do
      expect {
        get feeds_path(as: user)
      }.to raise_error(ActionController::RoutingError)
    end
  end

  describe "GET /feeds/:id" do
    it "works for admin" do
      get feed_path(feed, as: admin)
      expect(response).to be_successful
    end

    it "rejects other users" do
      expect {
        get feed_path(feed, as: user)
      }.to raise_error(ActionController::RoutingError)
    end
  end

  describe "DELETE /feeds/:id" do
    it "works for admin" do
      delete feed_path(feed, as: admin)
      expect(response).to be_redirect
    end

    it "rejects other users" do
      expect {
        delete feed_path(feed, as: user)
      }.to raise_error(ActionController::RoutingError)
    end
  end

  describe "PUT /feeds/:id" do
    it "works for admin" do
      put feed_path(feed, as: admin, params: { feed: { tag: "new tag" } })
      expect(response).to be_redirect
    end

    it "rejects other users" do
      expect {
        put feed_path(feed, as: user, params: { feed: { tag: "new tag" } })
      }.to raise_error(ActionController::RoutingError)
    end
  end
end
